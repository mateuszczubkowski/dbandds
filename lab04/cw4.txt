1.
DECLARE
    numer_max departments.department_id%TYPE;
    new_name departments.department_name%TYPE:='EDUCATION';
BEGIN
    SELECT MAX(department_id) 
    INTO numer_max 
    FROM departments;
    DBMS_OUTPUT.PUT_LINE('Maksymalny department_id ' || numer_max);
    INSERT INTO departments values (numer_max + 10, new_name, null, null);
END;

2.
DECLARE
    new_name departments.department_name%TYPE:='EDUCATION';
BEGIN
    UPDATE departments
    SET location_id = 3000
    WHERE department_name = new_name;
    DBMS_OUTPUT.PUT_LINE('Ustawiono nowe location_id dla departamentu o nazwie ' || new_name);
END;

3.
Musia³em oddzielnie CREATE TABLE nowa(pole VARCHAR(10));

DECLARE
BEGIN
    FOR i IN 1..10
    LOOP
        IF i <> 4 AND i <> 6
            THEN INSERT INTO nowa values (i);
        END IF;
    END LOOP;
END;

4.
DECLARE
    ca_row countries%ROWTYPE;
    ca_name countries.country_name%TYPE:='CA';
BEGIN
    SELECT *
    INTO ca_row
    FROM countries
    WHERE country_id = ca_name;
    DBMS_OUTPUT.PUT_LINE(ca_row.region_id || ' ' || ca_row.country_name);
END;

5.
DECLARE
    TYPE nazwadepartamentu IS TABLE OF
    departments.department_name%TYPE INDEX BY PLS_INTEGER;
    wynik nazwadepartamentu;
BEGIN
    FOR i IN 1..10
    LOOP
        SELECT department_name
        INTO wynik(i)
        FROM departments
        WHERE department_id = i*10;
        DBMS_OUTPUT.PUT_LINE(wynik(i));
    END LOOP;
END;

6.
DECLARE
    TYPE nazwadepartamentu IS TABLE OF
    departments%ROWTYPE INDEX BY PLS_INTEGER;
    wynik nazwadepartamentu;
BEGIN
    FOR i IN 1..10
    LOOP
        SELECT *
        INTO wynik(i)
        FROM departments
        WHERE department_id = i*10;
        DBMS_OUTPUT.PUT_LINE(wynik(i).department_id || ' ' || wynik(i).department_name || ' '
            || wynik(i).manager_id || ' ' || wynik(i).location_id);
    END LOOP;
END; 

7.
DECLARE 
CURSOR dept_50 IS
    SELECT salary, last_name
    FROM employees
    WHERE department_id = 50;
BEGIN
    FOR wiersz IN dept_50
    LOOP
    IF wiersz.salary > 3100 THEN
        DBMS_OUTPUT.put_line(wiersz.last_name || ' nie dawaæ podwy¿ki');
    ELSE
        DBMS_OUTPUT.put_line(wiersz.last_name || ' daæ podwy¿kê');
    END IF;
    END LOOP;
END;
        
8.
DECLARE 
    CURSOR zad8 (min_sal NUMBER, max_sal NUMBER, last_name_char VARCHAR) IS
    SELECT salary, first_name, last_name
    FROM employees
    WHERE salary > min_sal AND salary < max_sal AND (last_name LIKE LOWER('%' || last_name_char || '%')
    OR last_name LIKE UPPER('%' || last_name_char || '%'));
BEGIN
    DBMS_OUTPUT.put_line('A');
    FOR wiersz IN zad8(1000, 5000, 'a')
    LOOP
    DBMS_OUTPUT.put_line(wiersz.first_name || ' ' || wiersz.last_name || ' ' || wiersz.salary);
    END LOOP;
    DBMS_OUTPUT.put_line('B');
    FOR wiersz IN zad8(5000, 20000, 'u')
    LOOP
    DBMS_OUTPUT.put_line(wiersz.first_name || ' ' || wiersz.last_name || ' ' || wiersz.salary);
    END LOOP;
END;

9.
a.
CREATE OR REPLACE PROCEDURE zad9a(new_job_id IN VARCHAR, new_job_name IN VARCHAR) IS
ex EXCEPTION;
BEGIN
    INSERT INTO jobs VALUES(new_job_id, new_job_name, NULL, NULL);
    DBMS_OUTPUT.put_line(new_job_id || ' ' || new_job_name || ' added to Jobs');
EXCEPTION
    WHEN DUP_VAL_ON_INDEX THEN
    DBMS_OUTPUT.put_line('Job with this id already exists');
    WHEN OTHERS THEN
    DBMS_OUTPUT.put_line('Error occured');
END;

b. 
CREATE OR REPLACE PROCEDURE zad9b(edit_job_id IN VARCHAR, edit_job_name IN VARCHAR) IS
wiersz jobs%ROWTYPE;
ex EXCEPTION;
BEGIN
    SELECT * INTO wiersz FROM jobs WHERE job_id=edit_job_id;
    UPDATE jobs SET job_title = edit_job_name
    WHERE job_id = edit_job_id;
    DBMS_OUTPUT.put_line('Edited job');
EXCEPTION
    WHEN NO_DATA_FOUND THEN
    dbms_output.put_line('No jobs updated');
    WHEN OTHERS THEN
    DBMS_OUTPUT.put_line('Error occured');
END;

c. 
CREATE OR REPLACE PROCEDURE zad9c(delete_job_id IN VARCHAR) IS
wiersz jobs%ROWTYPE;
ex EXCEPTION;
BEGIN
    SELECT * INTO wiersz FROM jobs WHERE job_id=delete_job_id;
    DELETE FROM jobs WHERE job_id = delete_job_id;
    DBMS_OUTPUT.put_line('Job deleted');
EXCEPTION
    WHEN NO_DATA_FOUND THEN
    dbms_output.put_line('No jobs deleted');
    WHEN OTHERS THEN
    DBMS_OUTPUT.put_line('Error occured');
END;

d.
CREATE OR REPLACE PROCEDURE zad9d(find_employee_id IN VARCHAR, sal OUT NUMBER, lastname OUT VARCHAR) IS
ex EXCEPTION;
BEGIN
    SELECT * INTO salary, last_name INTO sal, lastname
    FROM employees WHERE employee_id=find_employee_id;
EXCEPTION
    WHEN NO_DATA_FOUND THEN
    DBMS_OUTPUT.put_line('No employee found');
    WHEN OTHERS THEN
    DBMS_OUTPUT.put_line('Error occured');
END;

e.
CREATE OR REPLACE PROCEDURE zad9e(
emp_id IN NUMBER DEFAULT employeeid_seq.nextval,
emp_fname IN VARCHAR DEFAULT 'Jan',
emp_lname IN VARCHAR DEFAULT 'Kowalski',
emp_mail IN VARCHAR DEFAULT 'abc@mail.com',
emp_edate IN DATE DEFAULT SYSDATE,
emp_jobid IN VARCHAR DEFAULT 'SH_CLERK',
emp_salary IN NUMBER DEFAULT 5000,
emp_commision IN NUMBER DEFAULT 2,
emp_managerid IN NUMBER DEFAULT 124,
emp_depid IN NUMBER DEFAULT 50
) IS
ex EXCEPTION;
BEGIN
    IF emp_salary>20000 THEN
	RAISE ex;
    END IF;
    INSERT INTO employees VALUES(emp_id, emp_fname, emp_lname, emp_mail, emp_mail, emp_edate, emp_jobid, emp_salary, 	emp_commision, emp_managerid, emp_depid);
    DBMS_OUTPUT.put_line('Employee added');
EXCEPTION
    WHEN ex THEN
    dbms_output.put_line('Salary is too high');
    WHEN DUP_VAL_ON_INDEX THEN
    DBMS_OUTPUT.put_line('Employee with this id already exists');
    WHEN OTHERS THEN
    dbms_output.put_line('Error occured');
END;
